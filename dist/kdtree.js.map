{"version":3,"file":"kdtree.js","sources":["../src/binary_heap.js","../src/quickselect.js","../src/tree.js"],"sourcesContent":["/**\n * Binary heap implementation from:\n * http://eloquentjavascript.net/appendix2.html\n */\nexport default class BinaryHeap {\n\n  /**\n   * @constructor\n   * @param  {Function} scoreFunction\n   */\n  constructor(scoreFunction) {\n\n    /**\n     * @type {Array}\n     */\n    this.content = [];\n\n    /**\n     * @type {Function}\n     */\n    this.scoreFunction = scoreFunction;\n  }\n\n  /**\n   * @param  {*} element\n   */\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  /**\n   * @return {*}\n   */\n  pop() {\n    let content = this.content;\n    // Store the first element so we can return it later.\n    let result = content[0];\n    // Get the element at the end of the array.\n    let end = content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (content.length > 0) {\n      content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  /**\n   * Non-destructive\n   * @return {*}\n   */\n  peek() {\n    return this.content[0];\n  }\n\n  /**\n   * @param  {*} node\n   */\n  remove(node) {\n    const len = this.content.length;\n    const scoreFunction = this.scoreFunction;\n    const content = this.content;\n\n    // To remove a value, we must search through the array to find it.\n    for (let i = 0; i < len; i++) {\n      if (content[i] === node) {\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        let end = content.pop();\n        if (i !== len - 1) {\n          content[i] = end;\n          if (scoreFunction(end) < scoreFunction(node)) {\n            this.bubbleUp(i);\n          } else {\n            this.sinkDown(i);\n          }\n        }\n        return;\n      }\n    }\n    throw new Error(\"Node not found.\");\n  }\n\n  /**\n   * @return {Number}\n   */\n  size() {\n    return this.content.length;\n  }\n\n  /**\n   * @param  {Number} n\n   */\n  bubbleUp(n) {\n    const content = this.content;\n    const scoreFunction = this.scoreFunction;\n    // Fetch the element that has to be moved.\n    let element = content[n];\n\n\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN = Math.floor((n + 1) / 2) - 1;\n      let parent = content[parentN];\n\n      // Swap the elements if the parent is greater.\n      if (scoreFunction(element) < scoreFunction(parent)) {\n        content[parentN] = element;\n        content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to move it further.\n      else break;\n    }\n  }\n\n  /**\n   * @param  {Number} n\n   */\n  sinkDown(n) {\n    const content = this.content;\n    const scoreFunction = this.scoreFunction;\n    const length = content.length;\n\n    // Look up the target element and its score.\n    let element = content[n];\n    let elemScore = scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N = (n + 1) * 2;\n      let child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n\n      let child1Score, child2Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        child1Score = scoreFunction(content[child1N]);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        child2Score = scoreFunction(this.content[child2N]);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap) {\n        content[n] = content[swap];\n        content[swap] = element;\n        n = swap;\n      } else break; // Otherwise, we are done.\n    }\n  }\n}\n","export default function selectKth(arr, k, f) {\n  if (arr.length <= k) throw new Error('Wrong input');\n\n  var from = 0, to = arr.length - 1;\n\n  // if from == to we reached the kth element\n  while (from < to) {\n    var r = from, w = to;\n    var mid = arr[Math.floor((r + w) / 2)];\n\n    // stop if the reader and writer meets\n    while (r < w) {\n      if (arr[r][f] >= mid[f]) { // put the large values at the end\n        var tmp = arr[w];\n        arr[w] = arr[r];\n        arr[r] = tmp;\n        w--;\n      } else r++; // the value is smaller than the pivot, skip\n    }\n\n    // if we stepped up (r++) we need to step one down\n    if (arr[r][f] > mid[f]) r--;\n\n    // the r pointer is on the end of the first k elements\n    if (k <= r) to = r;\n    else        from = r + 1;\n  }\n\n  return arr[k];\n}\n","import BinaryHeap  from './binary_heap';\nimport quickselect from './quickselect';\n\nfunction createNode(data, dimension, parent = null) {\n  return {\n    data, parent, dimension,\n\n    left:  null,\n    right: null\n  };\n}\n\nfunction insertionSort(arr, f) {\n  for(var i = 1, len = arr.length; i < len; i++) {\n    var el = arr[i], j = i;\n    while (j > 0 && arr[j - 1][f] > el[f]){\n      arr[j] = arr[j - 1];\n      j--;\n    }\n\n    arr[j] = el;\n  }\n\n  return arr;\n}\n\n\nexport default class KDTree {\n\n  constructor(points, metric, dimensions) {\n\n    /**\n     * @type {Array.<String>}\n     */\n    this.dimensions = dimensions;\n\n    var sorters = [];\n    for (var i = 0, len = dimensions.length; i < len; i++) {\n      var dimension = dimensions[i];\n      sorters.push(function (a, b) {\n        return a[dimension] - b[dimension];\n      });\n    }\n\n    this._sorters = sorters;\n\n    /**\n     * @type {Function}\n     */\n    this.metric = metric;\n\n    /**\n     * @type {Node}\n     */\n    this.root = null;\n\n    if (points) {\n      if (Array.isArray(points) && points.length > 0) {\n        this.load(points);\n      } else if (points.dimension) {\n        // If points is not an array, assume\n        // we're loading a pre-built tree\n        this.loadTree(points);\n      }\n    }\n  }\n\n  load(points) {\n    this.root = this.buildTree(points, 0, this.root);\n  }\n\n  /**\n   * Non-recursive bulk-insert\n   * @param  {Array.<Object>} points\n   * @param  {Number}         depth\n   * @param  {Object=}        parent\n   * @return {Node}\n   */\n  buildTree(points, depth, root) {\n    var d = this.dimensions.length;\n    var sorters = this._sorters;\n\n    if (root === null) root = this.root = createNode(null, depth % d, null);\n\n    var Q = [root], node;\n    var parts = [points];\n\n    while (node = Q.pop()) {\n      var range = parts.pop();\n      var N     = range.length;\n\n      if (N === 1) {\n        node.data = range[0];\n      } else {\n        var median    = Math.floor(N / 2);\n        var dimension = node.dimension;\n        var dim       = dimension % d;\n        //quickselect(range, median, undefined, undefined, (a, b) => a[dim] - b[dim]);\n        //insertionSort(range, dim);\n        // range.sort((a, b) => a[dim] - b[dim]);\n        node.data = quickselect(range, median, dim); // range[median];\n\n        if (median < N - 1) {\n          parts.push(range.slice(median + 1));\n          node.right = createNode(null, dimension + 1, node);\n          Q.push(node.right);\n        }\n\n        // split\n        if (median > 0) {\n          parts.push(range.slice(0, median));\n          node.left = createNode(null, dimension + 1, node);\n          Q.push(node.left);\n        }\n      }\n    }\n\n    return root;\n  }\n\n\n  /**\n   * Reloads a serialied tree by putting back `parent refs`\n   * @param  {Object=} data\n   */\n  loadTree(data) {\n    var root = data;\n    var Q = [root], node;\n\n    while (node = Q.pop()) {\n      if (node.left) {\n        node.left.parent = node;\n        Q.push(node.left);\n      }\n      if (node.right) {\n        node.right.parent = node;\n        Q.push(node.right);\n      }\n    }\n\n    this.root = root;\n    return this;\n  }\n\n\n  /**\n   * Convert to a JSON serializable structure;\n   * this just requires removing the `parent` property\n   *\n   * @param {Object=} src\n   */\n  toJSON(src) {\n    if (!src)\n      src = this.root;\n    let dest = createNode(src.data, src.dimension, null);\n    if (src.left) {\n      dest.left = this.toJSON(src.left);\n    }\n    if (src.right) {\n      dest.right = this.toJSON(src.right);\n    }\n    return dest;\n  }\n\n\n  _findNode(point) {\n    var Q = [this.root], node = null, D;\n    while (Q.length !== 0) {\n      node = Q.pop();\n      D = node.dimension;\n      if (point[D] < node.data[D] && node.left) Q.push(node.left);\n      else if (node.right)                      Q.push(node.right);\n    }\n    return node;\n  }\n\n  /**\n   * @param  {*}    point\n   * @return {Node}\n   */\n  insert(point) {\n    const dimensions = this.dimensions;\n\n    if (this.root === null) {\n      this.root = createNode(point, 0, null);\n      return this.root;\n    }\n\n    const node = this._findNode(point);\n    const dim  = node.dimension;\n    const newNode = createNode(point, (dim + 1) % dimensions.length, node);\n    const D = dimensions[dim];\n\n    if (point[D] < node.data[D]) node.left  = newNode;\n    else                         node.right = newNode;\n    return newNode;\n  }\n\n\n  /**\n   * @param  {Node}          node\n   * @param  {String|Number} dim\n   * @return {Node|Null}\n   */\n  findMin(node, dim) {\n    if (node === null) return null;\n\n    let D = this.dimensions[dim];\n\n    if (node.dimension === dim) {\n      if (node.left) {\n        return this.findMin(node.left, dim);\n      }\n      return node;\n    }\n\n    let own   = node.data[D];\n    let left  = this.findMin(node.left, dim);\n    let right = this.findMin(node.right, dim);\n    let min   = node;\n\n    if (left  !== null && left.data[D]  < own)         min = left;\n    if (right !== null && right.data[D] < min.data[D]) min = right;\n\n    return min;\n  }\n\n  /**\n   * @param  {Node} node\n   */\n  removeNode(node) {\n    let nextNode, nextObj;\n\n    if (node.left === null && node.right === null) {\n      if (node.parent === null) {\n        this.root = null;\n        return;\n      }\n\n      let pDimension = dimensions[node.parent.dimension];\n\n      if (node.data[pDimension] < node.parent.data[pDimension]) {\n        node.parent.left = null;\n      } else {\n        node.parent.right = null;\n      }\n      return;\n    }\n\n    // If the right subtree is not empty, swap with the minimum element on the\n    // node's dimension. If it is empty, we swap the left and right subtrees and\n    // do the same.\n    if (node.right !== null) {\n      nextNode = this.findMin(node.right, node.dimension);\n      nextObj = nextNode.data;\n      this.removeNode(nextNode);\n      node.data = nextObj;\n    } else {\n      nextNode = this.findMin(node.left, node.dimension);\n      nextObj = nextNode.data;\n      this.removeNode(nextNode);\n      node.right = node.left;\n      node.left = null;\n      node.data = nextObj;\n    }\n  }\n\n  /**\n   * Find and remove node\n   * @param  {*} point\n   * @return {*}\n   */\n  remove(point) {\n    let node = this._findNode(point);\n    if (node) this.removeNode(node);\n    return point;\n  }\n\n  /**\n   * @param  {Node}       node\n   * @param  {Number}     distance\n   * @param  {BinaryHeap} bestNodes\n   * @param  {Number}     maxNodes\n   */\n  static saveNode(node, distance, bestNodes, maxNodes) {\n    bestNodes.push([node, distance]);\n    if (bestNodes.size() > maxNodes) {\n      bestNodes.pop();\n    }\n  }\n\n  /**\n   * @param  {Node}       node\n   * @param  {*}          point\n   * @param  {BinaryHeap} bestNodes\n   * @param  {Number}     maxNodes\n   */\n  nearestSearch(node, point, bestNodes, maxNodes) {\n    let bestChild;\n    const dimensions = this.dimensions;\n    let dimension    = dimensions[node.dimension];\n    let ownDistance  = this.metric(point, node.data);\n    let linearPoint  = [];\n    let otherChild, i, d;\n\n    for (let i = 0, len = dimensions.length; i < len; i++) {\n      d = dimensions[i];\n      if (i === node.dimension) linearPoint[d] = point[d];\n      else                      linearPoint[d] = node.data[d];\n    }\n\n    let linearDistance = this.metric(linearPoint, node.data);\n\n    if (node.right === null && node.left === null) {\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        KDTree.saveNode(node, ownDistance, bestNodes, maxNodes);\n      }\n      return;\n    }\n\n    if (node.right === null) {\n      bestChild = node.left;\n    } else if (node.left === null) {\n      bestChild = node.right;\n    } else {\n      if (point[dimension] < node.data[dimension]) {\n        bestChild = node.left;\n      } else {\n        bestChild = node.right;\n      }\n    }\n\n    this.nearestSearch(bestChild, point, bestNodes, maxNodes);\n\n    if (bestNodes.size() < maxNodes ||\n      ownDistance < bestNodes.peek()[1]) {\n      KDTree.saveNode(node, ownDistance, bestNodes, maxNodes);\n    }\n\n    if (bestNodes.size() < maxNodes ||\n      Math.abs(linearDistance) < bestNodes.peek()[1]) {\n      if (bestChild === node.left) otherChild = node.right;\n      else                         otherChild = node.left;\n\n      if (otherChild !== null) {\n        this.nearestSearch(otherChild, point, bestNodes, maxNodes);\n      }\n    }\n  }\n\n  /**\n   * @param  {*} point\n   * @param  {Number} maxNodes\n   * @param  {Number}\n   * @return {Array.<*>} [data, distance]\n   */\n  nearest(point, maxNodes = 1, maxDistance = 0) {\n    let bestNodes = new BinaryHeap((e) => -e[1]);\n\n    if (maxDistance) {\n      for (let i = 0; i < maxNodes; i++) bestNodes.push([null, maxDistance]);\n    }\n\n    if (this.root) this.nearestSearch(this.root, point, bestNodes, maxNodes);\n\n    const result = [], content = bestNodes.content;\n\n    for (let i = 0, len = Math.min(maxNodes, content.length); i < len; i++) {\n      if (content[i][0]) result.push([content[i][0].data, content[i][1]]);\n    }\n    return result;\n  }\n\n  /**\n   * @return {Number}\n   */\n  balanceFactor() {\n    function height(node) {\n      if (node === null) return 0;\n      return Math.max(height(node.left), height(node.right)) + 1;\n    }\n\n    function count(node) {\n      if (node === null) return 0;\n      return count(node.left) + count(node.right) + 1;\n    }\n\n    return height(this.root) / (Math.log(count(this.root)) / Math.log(2));\n  }\n\n}\n"],"names":["let","this","quickselect","i"],"mappings":"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"}